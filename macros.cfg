#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

######################### CONDITIONALS #########################

# Conditional G28 (home if not already homed)
[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro _CZTILT]
gcode:
    {% if printer.z_tilt.applied == False %}
        Z_TILT_ADJUST
    {% endif %}

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  _CG28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Heating Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z200 F9000                    # Goes to center of the bed, and lower the bed close to fan
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor top_chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
    #TEMPERATURE_WAIT SENSOR="temperature_sensor top_chamber" MINIMUM=50 # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Heating Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
    # G4 P60000                                           # Waits ONLY 1 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Heating Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  # Cleaning the nozzle from residual stuck filament
  G4 P5000                                           # Waits 5s to have filament residue on nozzle soften
  CLEAN_NOZZLE

  
  #  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  STATUS_CALIBRATING_Z                       # Sets SB-leds to leveling-mode
  _CZTILT                                    # Levels the buildplate via z_tilt_adjust if needed
  # G28 Z                                    # Homes Z again after z_tilt_adjust

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  #SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  #STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  #quad_gantry_level               # Levels the buildplate via QGL
  #G28 Z                           # Homes Z again after QGL

  ##  Uncomment for Klicky auto-z
  #CALIBRATE_Z                                 # Calibrates Z-offset with klicky
  #SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info

  ##  Uncomment for bed mesh (2 of 2)
  CLEAN_NOZZLE
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  BED_MESH_CALIBRATE                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  CLEAN_NOZZLE
  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  MR_NOTIFY TITLE="$printer_name" MESSAGE="Starting to print!"
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  LINE_PURGE                                       # Purge line

#####################################################################
#   Macros
#####################################################################
# [gcode_macro PRINT_START]
# #   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
# gcode:
#     M117 Heating bed
#     M190 S{ params.BED }       ; Wait for bed to get to target temperature.

#     M117 Preheating nozzle
#     M109 S150                  ; Wait for nozzle to heat to 150C - soften filament, but no oozing.

#     M107                       ; Print fan off
#     G28                        ; Home - G28 or G32 depending on printer.
#     Z_TILT_ADJUST              ; Trident uses Z_TILT_ADJUST, V2 uses QUAD_GANTRY_LEVEL
#     G28 Z

#     {% if 'bed_mesh' in printer.configfile.config %}
#         BED_MESH_CALIBRATE
#     {% endif %}

#     M117 Heating nozzle
#     M109 S{ params.EXTRUDER }  ; Wait for nozzle to get to target temperature.

#     VORON_PURGE

#     G90                 ; Absolute coordinates.
#     M83                 ; Relative extruder mode.
#     G92 E0

#     M117 Printing

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400 ; Wait for buffer to clear
    G92 E0
    G1 E-5 F3600 ; Retract filament
    G1 E-18 F800 ; Retract filament from meltzone for cold Revo swaps
    G91
    #M400                           ; wait for buffer to clear
    #G92 E0                         ; zero the extruder
    #G1 E-25.0 F3600                ; retract filament out of the hot zone
    #G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    STATUS_HOMING
    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    {% set z_park_abs = printer.toolhead.position.z + 25.0 %}
    {% if z_park_abs > max_z %}
        {% set z_park_abs = max_z %}
    {% endif %}

    G0 Z{z_safe} F3600                   ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000        ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    SET_PIN PIN=nevermore VALUE=0        # Turns off the nevermore
    M107                                 ; turn off fan
    G90                                  ; absolute positioning
    G0 Z{z_park_abs} F3600               ; move nozzle up away from the print
    # G0 X{max_x / 2} Y{max_y - 10} F15000  ; park nozzle at rear
    G0 X{max_x -15} Y{max_y - 100} F15000  ; park nozzle at rear
    STATUS_READY
    G91
    M117 Done

# [gcode_macro _PRIME_NOZZLE]
# gcode:
#     SAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE
#     M117 Priming
#     G90                 ; Absolute coordinates.
#     M83                 ; Relative extruder mode.
#     G92 E0
#     ; Move to start of line.
#     G1 Z10 F900
#     G1 Y3 X3 F18000
#     G1 Z0.2 F900
#     ; Print the line.
#     G91                ; Relative coordinates.
#     G1 X100 E25 F1000  ; Extrude filament 25mm (how much it retracted in PRINT_END).
#     G1 Y-2 F1000
#     G1 X-60 E9 F1000    ; Print second part of the line.
#     G1 E-0.5 F3000      ; Retract to avoid stringing.
#     G1 X0.5 E0 F1000    ;  back to break string.
#     G1 X-5.5 E0 F1000   ; Wipe forward to break string.
#     RESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    SET_DISPLAY_TEXT MSG="Print: PAUSING" 
    STATUS_BUSY
    #{% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_runout_sensor ENABLE=0                           ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+20} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    #{% endif %}
    SET_DISPLAY_TEXT MSG="Print: PAUSED" 
    MR_NOTIFY TITLE="$printer_name" MESSAGE="Print is Paused!"

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    SET_DISPLAY_TEXT MSG="Print: RESUMING" 
    STATUS_PRINTING
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_runout_sensor ENABLE=1                   ; enable filament sensor
        #INITIAL_RGB                                                                 ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}
    SET_DISPLAY_TEXT MSG="Print: PRINT RESUMED" 
    MR_NOTIFY TITLE="$printer_name" MESSAGE="Print Resumed!"

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    # SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
    STATUS_READY
    G91
    G1 Z+10 F1500
    G90
    G28 X Y


[gcode_macro Z_TILT_ADJUST]
rename_existing: Z_TILT_ADJUST_BASE
gcode:
    # G28
    G1 F15000
    STATUS_CALIBRATING_Z
    Z_TILT_ADJUST_BASE
    G28 Z
    
[gcode_macro PID_EXTRUDER]
gcode:
    PID_CALIBRATE HEATER=extruder TARGET=270

[gcode_macro PID_BED]
gcode:
    PID_CALIBRATE HEATER=heater_bed TARGET=100

[gcode_macro CLEAN_NOZZLE]
gcode:
  SAVE_GCODE_STATE NAME=clean_nozzle_state
  STATUS_CLEANING
  G90
  G0 Z15 F5000
  G0 X205 Y260 F15000
  # G4 P30000 #Wait 1 minute to soften the stuck filament
  {% for wipe in range(12) %}
    {% for coordinate in [(205,260),(216,260)] %}
      G0 X{coordinate[0]} Y{coordinate[1]} Z1.1 F6000
    {% endfor %}
  {% endfor %}
  G0 X125 Y125 Z12 F8000
  RESTORE_GCODE_STATE NAME=clean_nozzle_state

[gcode_macro PARK_FRONT]
gcode:
  {% if "xy" in printer.toolhead.homed_axes %}
    G90 
    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+25} F6000
  {% endif %}
  

[gcode_macro PARK_PURGE]
gcode:
  {% if "xy" in printer.toolhead.homed_axes %}
    G90
    G0 X245 Y260 F15000
  {% endif %}
    

[gcode_macro PARK_FRONT_LEFT]
gcode:
  {% if "xy" in printer.toolhead.homed_axes %}
    G90
    G1 X{printer.toolhead.axis_maximum.x+5} Y{printer.toolhead.axis_minimum.y+15} F6000
  {% endif %}

[gcode_macro LOAD_FILAMENT]
variable_etemp: 245
gcode:
    {% set speed = params.SPEED|default(1800) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity | default(4500)%}
    STATUS_BUSY
    SAVE_GCODE_STATE NAME=load_state
    {% if etemp > 0 %}
      M104 S{etemp|int}
      #PARK_PURGE
      M109 S{etemp|int}                                                        ; wait for hotend to heat back up
    {% endif %}

    M83
    MR_NOTIFY TITLE="$printer_name" MESSAGE="Starting to extrude!"
    G1 E50 F{max_velocity} # fast-load
    G1 E50 F{max_velocity} # fast-load
    G1 E50 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge
    M400
    M104 S0
    RESTORE_GCODE_STATE NAME=load_state
    STATUS_READY
    MR_NOTIFY TITLE="$printer_name" MESSAGE="Load Completed!"


[gcode_macro UNLOAD_FILAMENT]
variable_etemp: 255
gcode:
    {% set speed = params.SPEED|default(600) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity | default(3600) %}
    SAVE_GCODE_STATE NAME=unload_state
    STATUS_BUSY
    {% if etemp > 0 %}
      M104 S{etemp|int}
      #PARK_PURGE
      M109 S{etemp|int}                                                        ; wait for hotend to heat back up
    {% endif %}
    M83
    G1 E25 F{speed} # purge
    G1 E-50 F{max_velocity} # fast-unload
    #G1 E-40 F{max_velocity} # fast-unload
    #G1 E-40 F{max_velocity} # fast-unload
    M104 S0
    RESTORE_GCODE_STATE NAME=unload_state
    STATUS_READY
    MR_NOTIFY TITLE="$printer_name" MESSAGE="Unload Completed!"



# Home, get position, throw around toolhead, home again. 
 # If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured. 
 # We only measure to a full step to accomodate for endstop variance. 
 # Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10 

# [gcode_macro Load_manual]
# description: Filament load
# gcode:
#     {% set extruder_temp = params.TEMPERATURE|default(240)|float %}

#     SAVE_GCODE_STATE NAME=my_state                                          ; Save GCODE state
#     SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}           ; Extruder heating
#     TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}                ; Extruder wait

#     # respond PREFIX=info TYPE=echo MSG="Wait for temperature: {extruder_temp|string}°C" COLOR=accent
#     SET_DISPLAY_TEXT MSG="Wait for temperature: {extruder_temp|string}°C"
#     M83                                                                     ; Extruder -> Relative Positioning
#     # respond PREFIX=info TYPE=echo MSG="Filament loading in progress" COLOR=accent
#     SET_DISPLAY_TEXT MSG=="Filament loading in progress"
#     G92 E0                                                                  ; Extruder -> set zero
#     # respond PREFIX=info TYPE=echo MSG="Extruding" COLOR=accent
#     SET_DISPLAY_TEXT MSG="Extruding"
#     G1  E6  F200                                                            ; Extrudieren (Begin)
#     G1  E61 F600                                                            ; Extrudieren (Mid)
#     G1  E30 F100                                                            ; Extrudieren (End)
#     G92 E0                                                                  ; Extruder -> set zero
#     RESTORE_GCODE_STATE NAME=my_state                                       ; Restore GCODE state
#     # respond PREFIX=info TYPE=echo MSG="Filament load finished" COLOR=success
#     SET_DISPLAY_TEXT MSG="Filament load finished"

# [gcode_macro Unload_manual]
# description: Filament Unload
# gcode:
#     {% set extruder_new_temp = params.TEMPERATURE|default(240)|float %}
#     {% if extruder_new_temp >= 230 %}
#         {action_respond_info("New temperature: " + extruder_new_temp|string + "°C")}
#     {% else %}
#         {action_raise_error("Desired temperature of " + extruder_new_temp|string + "°C is to low. Macro halted")}
#     {% endif %}

#     {action_respond_info("Waiting for unload temperature")}             ; Display message
#     SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_new_temp}   ; Extruder heating
#     TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_new_temp}        ; Extruder wait
#     G1  E-30 F100                                                            ; Extrudieren (End)
#     G1  E-61 F100                                                            ; Extrudieren (Mid)
#     G1  E-61 F100                                                            ; Extrudieren (Mid)
#     G92 E0                                                              ; Extruder nullen


# [gcode_macro RESPOND]
# rename_existing: BASE_RESPOND
# gcode:
#     {% set colors = ('primary', 'secondary', 'accent', 'info', 'success', 'error', 'warning') %}

#     {% if params.PREFIX is defined %}
#         {% set prefix = 'PREFIX=' + params.PREFIX|string %}
#     {% endif %}

#     {% if params.TYPE is defined %}
#         {% if params.TYPE in ('echo', 'echo_no_space', 'command', 'error') and params.TYPE != '' %}
#             {% set type = 'TYPE=' + params.TYPE|string %}
#         {% else %}
#             BASE_RESPOND TYPE=error MSG="RESPOND TYPE '{params.TYPE}' is invalid. Must be one of 'echo', 'command' or 'error'"
#         {% endif %}
#     {% endif %}

#     {% if params.MSG is defined %}
#         {% set msg = 'MSG="'+ params.MSG + '"'|string %}
#     {% endif %}

#     {% if params.COLOR is defined %}
#         {% set color = params.COLOR|lower %}

#         {% if color in colors %}
#             {% set msg = 'MSG="<span class=' + color + '--text>' + params.MSG + '</span>"'|string %}
    
#         {% else %}
#             BASE_RESPOND TYPE=error MSG="RESPOND COLOR '{color}' is invalid. Must be one of 'primary', 'secondary', 'accent', 'info', 'success', 'warning' or 'error'"
#         {% endif %}

#     {% endif %}
#     BASE_RESPOND {prefix} {type} {msg}


[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|int %}
    # Bounding box (in case the machine min/maxes are not perfect)
    {% set bound = params.BOUND|default(20)|int %}

    {% set home = params.HOME|default(1)|int %}
    
    # Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
    {% set x_min = printer.toolhead.axis_minimum.x + bound %}
    {% set x_max = printer.toolhead.axis_maximum.x - bound %}
    {% set y_min = printer.toolhead.axis_minimum.y + bound %}
    {% set y_max = printer.toolhead.axis_maximum.y - (bound * 2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Absolute positioning
    
    # Set new limits

    {% if 'XYZ' not in printer.toolhead.homed_axes.upper() or home == 1 %}
        # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %}    
    {% endif %}

    G0 X{x_max} Y{y_max} F{30 * 60}
    G4 P1000 
    GET_POSITION
    SET_VELOCITY_LIMIT VELOCITY={speed} 
    M204 S{accel}

    G90
    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

    {% for i in range(iterations) %}
        # Diagonals
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_max} Y{y_max} F{speed * 60}
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
        G0 X{x_min} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
        # Box
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_min} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    {% if home == 1 %}
    # Re-home XY and get position again for comparison:
        G28 X Y
    {% endif %}
    # Go to XY home positions (in case your homing override leaves it elsewhere)
    G0 X{x_max} Y{y_max} F{30 * 60}
    G4 P1000 
    GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro MR_NOTIFY]
description: Allows you to send a custom notification via Mobileraker without using the M117 command
gcode:
    {% set msg = "MR_NOTIFY:" ~ (params.TITLE ~ "|" if 'TITLE' in params|upper else "") ~ params.MESSAGE %}

    {% if 'MESSAGE' in params|upper %}
        { action_respond_info(msg) }
    {% else %}
        { action_raise_error('Must provide MESSAGE parameter') }
    {% endif %}

[gcode_macro T0]
gcode:
  ACTIVATE_EXTRUDER EXTRUDER=extruder