#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro SAVE_CURRENT_ACCEL]
gcode:
  SAVE_GCODE_STATE NAME=current_state
######################### CONDITIONALS #########################


[gcode_macro RESTORE_ACCEL]
gcode:
  RESTORE_GCODE_STATE NAME=current_state

# Conditional G28 (home if not already homed)
[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

# [gcode_macro G28]
# rename_existing: G28.1
# gcode:
#     # {% if "xyz" not in printer.toolhead.homed_axes %}
#         #SAVE_CURRENT_ACCEL
#         #SVELOCITY_LIMIT ACCEL=15000
#         G28.1 X Y
#         G0 X240 Y240
#         G28.1 X Y
#         G28.1 Z
#         #RESTORE_ACCEL
#     # {% endif %}

[gcode_macro _CZTILT]
gcode:
    {% if printer.z_tilt.applied == False %}
        Z_TILT_ADJUST
    {% endif %}

[gcode_macro FAST_Z_TILT]
gcode:
    Z_TILT_ADJUST RETRY_TOLERANCE=1
    Z_TILT_ADJUST horizontal_move_z=2
    
[gcode_macro PRINT_START]
gcode:
  SET_GCODE_OFFSET Z=0
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  #{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  #{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  {% set x_wait = 245 %}
  {% set y_wait = 253%}
  CLEAR_PAUSE
  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  #STATUS_HOMING         # Sets SB-leds to homing-mode
  _CG28                   # Full home (XYZ)
  G0 Z2   ; position beacon at 2mm for heat soak
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Heating Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c
  WAIT_FOR WAIT_TIME=90
  
  
  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Heating Bed: {target_bed}c"           # Displays info
    #STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan
    
    ##  Uncomment if you have a Nevermore.
    SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z20 F9000                    # Goes to center of the bed, and lower the bed close to fan
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor top_chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
    #TEMPERATURE_WAIT SENSOR="temperature_sensor top_chamber" MINIMUM=50 # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Heating Bed: {target_bed}c"           # Displays info
    #STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    # SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    WAIT_FOR WAIT_TIME=300                              # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  #SET_DISPLAY_TEXT MSG="Heating Hotend: 150c"          # Displays info
  #M109 S150                                    # Heats the nozzle to 150c

  # Cleaning the nozzle from residual stuck filament
  CLEAN_NOZZLE

  #  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Beacon Contact"     # Displays info
  #STATUS_CALIBRATING_Z                       # Sets SB-leds to leveling-mode
  G28 Z METHOD=CONTACT CALIBRATE=1    ; calibrate z offset and beacon model hot
  SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  _CZTILT                                    # Levels the buildplate via z_tilt_adjust if needed
  # G28 Z                                    # Homes Z again after z_tilt_adjust

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  #SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  #STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  #quad_gantry_level               # Levels the buildplate via QGL
  #G28 Z                           # Homes Z again after QGL

  ##  Uncomment for Klicky auto-z
  #CALIBRATE_Z                                 # Calibrates Z-offset with klicky
  #SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info

  ##  Uncomment for bed mesh (2 of 2)
  #CLEAN_NOZZLE
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  #STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  BED_MESH_CALIBRATE                 # Starts bed mesh

  CLEAN_NOZZLE
  SET_DISPLAY_TEXT MSG="Beacon Contact"     # Displays info
  G28 Z METHOD=CONTACT CALIBRATE=0    ; calibrate z offset only after tilt/mesh
  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  #STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  CLEAN_NOZZLE
  # # Calculate the expansion value
  # {% if params.BED|int > 90 %}
  #     {% set expansion = 0.00013333 * target_extruder %}
  # {% else %}
  #     {% set expansion = 0.00017778 * target_extruder  %}
  # {% endif %}
  # # Set the Z offset
  # #SET_DISPLAY_TEXT MSG="Setting z offset to {expansion}"
  # SET_GCODE_OFFSET Z={expansion}
  # set nozzle thermal expansion offset
  {% if printer.configfile.settings.beacon is defined %}
      _BEACON_SET_NOZZLE_TEMP_OFFSET 
  {% endif %}
  
  # SET_GCODE_OFFSET Z=0.04    ; add a little offset for hotend thermal expansion
                        #    ; needs fine tuning, long meltzones require more
  # SET_GCODE_OFFSET Z_ADJUST={OFFSET}  ; apply optional material squish via slicer
  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  MR_NOTIFY TITLE="$printer_name" MESSAGE="Starting to print!"
  #STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  LINE_PURGE                                       # Purge line

#####################################################################
#   Macros
#####################################################################
# [gcode_macro PRINT_START]
# #   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
# gcode:
#     M117 Heating bed
#     M190 S{ params.BED }       ; Wait for bed to get to target temperature.

#     M117 Preheating nozzle
#     M109 S150                  ; Wait for nozzle to heat to 150C - soften filament, but no oozing.

#     M107                       ; Print fan off
#     G28                        ; Home - G28 or G32 depending on printer.
#     Z_TILT_ADJUST              ; Trident uses Z_TILT_ADJUST, V2 uses QUAD_GANTRY_LEVEL
#     G28 Z

#     {% if 'bed_mesh' in printer.configfile.config %}
#         BED_MESH_CALIBRATE
#     {% endif %}

#     M117 Heating nozzle
#     M109 S{ params.EXTRUDER }  ; Wait for nozzle to get to target temperature.

#     VORON_PURGE

#     G90                 ; Absolute coordinates.
#     M83                 ; Relative extruder mode.
#     G92 E0

#     M117 Printing

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400 ; Wait for buffer to clear
    G92 E0
    G1 E-5 F3600 ; Retract filament
    G1 E-18 F800 ; Retract filament from meltzone for cold Revo swaps
    G91
    #M400                           ; wait for buffer to clear
    #G92 E0                         ; zero the extruder
    #G1 E-25.0 F3600                ; retract filament out of the hot zone
    #G91                            ; relative positioning

    # reset nozzle thermal expansion offset
    {% if printer.configfile.settings.beacon is defined %}
        _BEACON_REMOVE_NOZZLE_TEMP_OFFSET
        _BEACON_SET_NOZZLE_TEMP_OFFSET RESET=True
    {% endif %}
    
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #STATUS_HOMING
    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    {% set z_park_abs = printer.toolhead.position.z + 25.0 %}
    {% if z_park_abs > max_z %}
        {% set z_park_abs = max_z %}
    {% endif %}

    G0 Z{z_safe} F3600                   ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000        ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    SET_PIN PIN=nevermore VALUE=0        # Turns off the nevermore
    M107                                 ; turn off fan
    G90                                  ; absolute positioning
    G0 Z{z_park_abs} F3600               ; move nozzle up away from the print
    # G0 X{max_x / 2} Y{max_y - 10} F15000  ; park nozzle at rear
    G0 X{max_x -15} Y{max_y - 100} F15000  ; park nozzle at rear
    #STATUS_READY
    #G91
    M117 Done

# [gcode_macro _PRIME_NOZZLE]
# gcode:
#     SAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE
#     M117 Priming
#     G90                 ; Absolute coordinates.
#     M83                 ; Relative extruder mode.
#     G92 E0
#     ; Move to start of line.
#     G1 Z10 F900
#     G1 Y3 X3 F18000
#     G1 Z0.2 F900
#     ; Print the line.
#     G91                ; Relative coordinates.
#     G1 X100 E25 F1000  ; Extrude filament 25mm (how much it retracted in PRINT_END).
#     G1 Y-2 F1000
#     G1 X-60 E9 F1000    ; Print second part of the line.
#     G1 E-0.5 F3000      ; Retract to avoid stringing.
#     G1 X0.5 E0 F1000    ;  back to break string.
#     G1 X-5.5 E0 F1000   ; Wipe forward to break string.
#     RESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    SET_DISPLAY_TEXT MSG="Print: PAUSING" 
    #STATUS_BUSY
    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_runout_sensor ENABLE=0                           ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+20} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}
    SET_DISPLAY_TEXT MSG="Print: PAUSED" 
    MR_NOTIFY TITLE="$printer_name" MESSAGE="Print is Paused!"

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    SET_DISPLAY_TEXT MSG="Print: RESUMING" 
    #STATUS_PRINTING
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_runout_sensor ENABLE=1                   ; enable filament sensor
        #INITIAL_RGB                                                                 ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}
    SET_DISPLAY_TEXT MSG="Print: PRINT RESUMED" 
    MR_NOTIFY TITLE="$printer_name" MESSAGE="Print Resumed!"

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    # SDCARD_RESET_FILE
    # reset nozzle thermal expansion offset
    {% if printer.configfile.settings.beacon is defined %}
        _BEACON_REMOVE_NOZZLE_TEMP_OFFSET
        _BEACON_SET_NOZZLE_TEMP_OFFSET RESET=True
    {% endif %}
    PRINT_END
    BASE_CANCEL_PRINT
    #STATUS_READY
    G91
    G1 Z+10 F1500
    G90
    G28 X Y


[gcode_macro Z_TILT_ADJUST]
rename_existing: Z_TILT_ADJUST_BASE
gcode:
    # G28
    G1 F15000
    #STATUS_CALIBRATING_Z
    Z_TILT_ADJUST_BASE RETRY_TOLERANCE=1
    Z_TILT_ADJUST_BASE horizontal_move_z=2
    #Z_TILT_ADJUST_BASE
    G28 Z
    
[gcode_macro PID_EXTRUDER]
gcode:
    PID_CALIBRATE HEATER=extruder TARGET=270
    SAVE_CONFIG

[gcode_macro PID_BED]
gcode:
    PID_CALIBRATE HEATER=heater_bed TARGET=100
    SAVE_CONFIG

[gcode_macro CLEAN_NOZZLE]
gcode:
  SAVE_GCODE_STATE NAME=clean_nozzle_state
  # Get the current extruder temperature
  {% set current_temp = printer.extruder.temperature %}
  {% set target_extruder = 150 %}

  # Check if the current temperature is greater than the threshold
  {% if current_temp < target_extruder %}
      # Set the extruder temperature to the threshold
      SET_DISPLAY_TEXT MSG="Increasing extruder temperature to allow material softening, Target: {target_extruder}c"
      M109 S{target_extruder}
  {% endif %}
  
  #STATUS_CLEANING
  WAIT_FOR WAIT_TIME=15          # Waits 15s to have filament residue on nozzle soften
  G90
  G0 Z15 F5000
  G0 X220 Y250 F15000

  {% for wipe in range(12) %}
    {% for coordinate in [(195,250),(220,250)] %}
      G0 X{coordinate[0]} Y{coordinate[1]} Z0.35 F10000
    {% endfor %}
  {% endfor %}
  G0 X245 Y253 Z12 F8000
  RESTORE_GCODE_STATE NAME=clean_nozzle_state

[gcode_macro PARK_FRONT]
gcode:
  {% if "xy" in printer.toolhead.homed_axes %}
    G90 
    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+25} F6000
  {% endif %}
  

[gcode_macro PARK_PURGE]
gcode:
  {% if "xy" in printer.toolhead.homed_axes %}
    G90
    G0 X245 Y260 F15000
  {% endif %}
    

[gcode_macro PARK_FRONT_LEFT]
gcode:
  {% if "xy" in printer.toolhead.homed_axes %}
    G90
    G1 X{printer.toolhead.axis_maximum.x+5} Y{printer.toolhead.axis_minimum.y+15} F6000
  {% endif %}

[gcode_macro LOAD_FILAMENT]
variable_etemp: 245
gcode:
    {% set speed = params.SPEED|default(1800) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity | default(4500)%}
    #STATUS_BUSY
    SAVE_GCODE_STATE NAME=load_state
    {% if etemp > 0 %}
      M104 S{etemp|int}
      #PARK_PURGE
      M109 S{etemp|int}                                                        ; wait for hotend to heat back up
    {% endif %}

    M83
    MR_NOTIFY TITLE="$printer_name" MESSAGE="Starting to extrude!"
    G1 E50 F{max_velocity} # fast-load
    G1 E50 F{max_velocity} # fast-load
    G1 E50 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge
    M400
    M104 S0
    RESTORE_GCODE_STATE NAME=load_state
    #STATUS_READY
    MR_NOTIFY TITLE="$printer_name" MESSAGE="Load Completed!"


[gcode_macro UNLOAD_FILAMENT]
variable_etemp: 255
gcode:
    {% set speed = params.SPEED|default(600) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity | default(3600) %}
    SAVE_GCODE_STATE NAME=unload_state
    #STATUS_BUSY
    {% if etemp > 0 %}
      M104 S{etemp|int}
      #PARK_PURGE
      M109 S{etemp|int}                                                        ; wait for hotend to heat back up
    {% endif %}
    M83
    G1 E25 F{speed} # purge
    G1 E-50 F{max_velocity} # fast-unload
    #G1 E-40 F{max_velocity} # fast-unload
    #G1 E-40 F{max_velocity} # fast-unload
    M104 S0
    RESTORE_GCODE_STATE NAME=unload_state
    #STATUS_READY
    MR_NOTIFY TITLE="$printer_name" MESSAGE="Unload Completed!"



# Home, get position, throw around toolhead, home again. 
 # If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured. 
 # We only measure to a full step to accomodate for endstop variance. 
 # Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10 

# [gcode_macro Load_manual]
# description: Filament load
# gcode:
#     {% set extruder_temp = params.TEMPERATURE|default(240)|float %}

#     SAVE_GCODE_STATE NAME=my_state                                          ; Save GCODE state
#     SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}           ; Extruder heating
#     TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}                ; Extruder wait

#     # respond PREFIX=info TYPE=echo MSG="Wait for temperature: {extruder_temp|string}°C" COLOR=accent
#     SET_DISPLAY_TEXT MSG="Wait for temperature: {extruder_temp|string}°C"
#     M83                                                                     ; Extruder -> Relative Positioning
#     # respond PREFIX=info TYPE=echo MSG="Filament loading in progress" COLOR=accent
#     SET_DISPLAY_TEXT MSG=="Filament loading in progress"
#     G92 E0                                                                  ; Extruder -> set zero
#     # respond PREFIX=info TYPE=echo MSG="Extruding" COLOR=accent
#     SET_DISPLAY_TEXT MSG="Extruding"
#     G1  E6  F200                                                            ; Extrudieren (Begin)
#     G1  E61 F600                                                            ; Extrudieren (Mid)
#     G1  E30 F100                                                            ; Extrudieren (End)
#     G92 E0                                                                  ; Extruder -> set zero
#     RESTORE_GCODE_STATE NAME=my_state                                       ; Restore GCODE state
#     # respond PREFIX=info TYPE=echo MSG="Filament load finished" COLOR=success
#     SET_DISPLAY_TEXT MSG="Filament load finished"

# [gcode_macro Unload_manual]
# description: Filament Unload
# gcode:
#     {% set extruder_new_temp = params.TEMPERATURE|default(240)|float %}
#     {% if extruder_new_temp >= 230 %}
#         {action_respond_info("New temperature: " + extruder_new_temp|string + "°C")}
#     {% else %}
#         {action_raise_error("Desired temperature of " + extruder_new_temp|string + "°C is to low. Macro halted")}
#     {% endif %}

#     {action_respond_info("Waiting for unload temperature")}             ; Display message
#     SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_new_temp}   ; Extruder heating
#     TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_new_temp}        ; Extruder wait
#     G1  E-30 F100                                                            ; Extrudieren (End)
#     G1  E-61 F100                                                            ; Extrudieren (Mid)
#     G1  E-61 F100                                                            ; Extrudieren (Mid)
#     G92 E0                                                              ; Extruder nullen


# [gcode_macro RESPOND]
# rename_existing: BASE_RESPOND
# gcode:
#     {% set colors = ('primary', 'secondary', 'accent', 'info', 'success', 'error', 'warning') %}

#     {% if params.PREFIX is defined %}
#         {% set prefix = 'PREFIX=' + params.PREFIX|string %}
#     {% endif %}

#     {% if params.TYPE is defined %}
#         {% if params.TYPE in ('echo', 'echo_no_space', 'command', 'error') and params.TYPE != '' %}
#             {% set type = 'TYPE=' + params.TYPE|string %}
#         {% else %}
#             BASE_RESPOND TYPE=error MSG="RESPOND TYPE '{params.TYPE}' is invalid. Must be one of 'echo', 'command' or 'error'"
#         {% endif %}
#     {% endif %}

#     {% if params.MSG is defined %}
#         {% set msg = 'MSG="'+ params.MSG + '"'|string %}
#     {% endif %}

#     {% if params.COLOR is defined %}
#         {% set color = params.COLOR|lower %}

#         {% if color in colors %}
#             {% set msg = 'MSG="<span class=' + color + '--text>' + params.MSG + '</span>"'|string %}
    
#         {% else %}
#             BASE_RESPOND TYPE=error MSG="RESPOND COLOR '{color}' is invalid. Must be one of 'primary', 'secondary', 'accent', 'info', 'success', 'warning' or 'error'"
#         {% endif %}

#     {% endif %}
#     BASE_RESPOND {prefix} {type} {msg}


[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|int %}
    # Bounding box (in case the machine min/maxes are not perfect)
    {% set bound = params.BOUND|default(20)|int %}

    {% set home = params.HOME|default(1)|int %}
    
    # Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
    {% set x_min = printer.toolhead.axis_minimum.x + bound %}
    {% set x_max = printer.toolhead.axis_maximum.x - bound %}
    {% set y_min = printer.toolhead.axis_minimum.y + bound %}
    {% set y_max = printer.toolhead.axis_maximum.y - (bound * 2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Absolute positioning
    
    # Set new limits

    {% if 'XYZ' not in printer.toolhead.homed_axes.upper() or home == 1 %}
        # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %}    
    {% endif %}

    G0 X{x_max} Y{y_max} F{30 * 60}
    G4 P1000 
    GET_POSITION
    SET_VELOCITY_LIMIT VELOCITY={speed} 
    M204 S{accel}

    G90
    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

    {% for i in range(iterations) %}
        # Diagonals
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_max} Y{y_max} F{speed * 60}
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
        G0 X{x_min} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
        # Box
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_min} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    {% if home == 1 %}
    # Re-home XY and get position again for comparison:
        G28 X Y
    {% endif %}
    # Go to XY home positions (in case your homing override leaves it elsewhere)
    G0 X{x_max} Y{y_max} F{30 * 60}
    G4 P1000 
    GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro MR_NOTIFY]
description: Allows you to send a custom notification via Mobileraker without using the M117 command
gcode:
    {% set msg = "MR_NOTIFY:" ~ (params.TITLE ~ "|" if 'TITLE' in params|upper else "") ~ params.MESSAGE %}

    {% if 'MESSAGE' in params|upper %}
        { action_respond_info(msg) }
    {% else %}
        { action_raise_error('Must provide MESSAGE parameter') }
    {% endif %}

[gcode_macro T0]
gcode:
  ACTIVATE_EXTRUDER EXTRUDER=extruder

[gcode_macro G28]
description: Custom G28 command with temperature check for Z homing
rename_existing: G28.1
gcode:
    {% set TARGET_TEMP = printer.extruder.target %}
    {% set axes = params.keys() %}
    {% set contact_max_hotend_temperature = 150 %}
    {% if printer.configfile.settings.beacon is defined %}
      {% if printer.configfile.settings.beacon.contact_max_hotend_temperature is defined %}
        {% set contact_max_hotend_temperature = printer.configfile.settings.beacon.contact_max_hotend_temperature %}
      {% endif %}
    {% endif %}
    {% set threshold_temp = contact_max_hotend_temperature - 10 %}
    {% set lowered = 0 %}
    {% set no_specific_axes_specified = not ('X' in axes or 'Y' in axes or 'Z' in axes) %}
    # Get the current extruder temperature
    {% set current_temp = printer.extruder.temperature %}

    {% set method = params.METHOD|default("CONTACT") %}
    {% set calibrate = params.CALIBRATE|default(1)|int %}

    
    {% if 'X' in axes or no_specific_axes_specified %}
        _HOME_PRE_AXIS AXIS=X
        G28.1 X
        _HOME_POST_AXIS AXIS=X
    {% endif %}
    
    {% if 'Y' in axes or no_specific_axes_specified %}
        _HOME_PRE_AXIS AXIS=Y
        G28.1 Y
        _HOME_POST_AXIS AXIS=Y
    {% endif %}
    
    {% if 'Z' in axes or no_specific_axes_specified %}
        # Check if the current temperature is greater than the threshold
        {% if current_temp > threshold_temp %}
            # Set the extruder temperature to the threshold
            SET_DISPLAY_TEXT MSG="Lowering extruder temp to allow contact, Target: {threshold_temp}c"
            M106 S255  ; 100% the part cooling fan to help the extruder cooling
            M109 S{threshold_temp}
            M106 S0    ; Stop the part cooling fan
            #SET_DISPLAY_TEXT MSG="Raising extruder temperature to previous target value, Target: {TARGET_TEMP}c"
            #M109 S{TARGET_TEMP}
             {% set lowered = 1 %}   
         {% endif %}

        # Home the Z axis
        G28.1 Z METHOD={method} CALIBRATE={calibrate}
        {% if lowered == 1 %}
            SET_DISPLAY_TEXT MSG="Raising extruder temperature to previous target value, Target: {TARGET_TEMP}c"
            M109 S{TARGET_TEMP}
        {% endif %}
    {% endif %}
    
   # SET_DISPLAY_TEXT MSG="Raising extruder temperature to previous target value, Target: {TARGET_TEMP}c"
   # M109 S{TARGET_TEMP}


[gcode_macro _HOME_PRE_AXIS]
gcode:
  # Adapt this for your printer.
  # {% set HOME_CURRENT = 0.5 %}
  # SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
  # SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

[gcode_macro _HOME_POST_AXIS]
gcode:
  {% set axis = params.AXIS %}
  # {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
  # {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}

  # Move away
  SAVE_GCODE_STATE NAME=home_post_axis
  G91
  G0 {axis}-10 F3600
  RESTORE_GCODE_STATE NAME=home_post_axis

  # Make sure StallGuard registers are cleared
  M400
  # Set current during print
  # SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
  # SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro WAIT_FOR]
description: Wait for a specified number of seconds with updated display text every 30 seconds
variable_WAIT_TIME: 300  # Default wait time in seconds
gcode:
    {% set wait_time = params.WAIT_TIME|default(300)|int %}  # Total wait time in seconds (input parameter)
    {% set interval = 30 %}  # Update interval in seconds
    {% set loops = wait_time // interval %}
    {% set remainder = wait_time % interval %}
    
    # Loop for full intervals
    {% for i in range(loops) %}
        {% set remaining_time = wait_time - (i * interval) %}
        {% set minutes = remaining_time // 60 %}
        {% set seconds = remaining_time % 60 %}
        SET_DISPLAY_TEXT MSG="Wait for { minutes }m { seconds }s left"
        G4 P{ interval * 1000 }
    {% endfor %}
    
    # Handle the remainder time
    {% if remainder > 0 %}
        {% set minutes = remainder // 60 %}
        {% set seconds = remainder % 60 %}
        SET_DISPLAY_TEXT MSG="Wait for { minutes }m { seconds }s left"
        G4 P{ remainder * 1000 }
    {% endif %}
    
    # Final message after waiting is complete
    SET_DISPLAY_TEXT MSG="Wait complete"

[gcode_macro TEST_CONTACT_POKE]
description: "Test contact poke at different temperatures"
variable_TEMP_START: 150
variable_TEMP_END: 280
variable_TEMP_STEP: 10
variable_SPACING: 10
variable_NUM_POKES: 10

gcode:
    {% set x_max = printer.toolhead.axis_maximum.x %}
    {% set y_max = printer.toolhead.axis_maximum.y %}
    {% set x_min = printer.toolhead.axis_minimum.x %}
    {% set y_min = printer.toolhead.axis_minimum.y %}
    {% set y_start = y_min %}
    {% set x_start = x_min + 15 %}
    
    {% set temp_start = params.TEMP_START|default(150)|int %}
    {% set temp_end = params.TEMP_END|default(280)|int %}
    {% set temp_step = params.TEMP_STEP|default(10)|int %}
    {% set spacing = params.SPACING|default(10)|float %}
    {% set num_pokes = params.NUM_POKES|default(10)|int %}

    # Ensure the printer is homed
    _CG28

    # Ensure Z is at a safe position
    G1 Z10 F1500

    {% for temp in range(temp_start, temp_end + 1, temp_step) %}
        M104 S{temp}
        M109 S{temp}  # Wait for temperature to reach the target

        {% set current_x = x_start %}
        G1 X{current_x} Y{y_start} F1500  # Move to starting position

        # Run BEACON_POKE 10 times at the same spot
        {% for _ in range(num_pokes) %}
            BEACON_POKE
        {% endfor %}

        # Move to the next pattern position
        {% if current_x >= x_max - 15 %}
            break
        {% endif %}
        {% set current_x = current_x + spacing %}
         
    {% endfor %}

    M104 S0  # Turn off hotend

[gcode_macro BEACON]
variable_beacon_contact_calibration_temp: 150           # nozzle temperature for auto calibration
variable_beacon_contact_expansion_compensation: True   # enables the nozzle thermal expansion compensation
variable_beacon_contact_expansion_multiplier: 0.7       # multiplier for the nozzle thermal expansion compensation
# Do not modify below
gcode:


[gcode_macro BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET]
variable_reference_z: 0.0
gcode:
	{% set z_speed = (printer.configfile.settings['stepper_z'].homing_speed)|float * 60 %}
	{% set z_hop = (printer.configfile.settings['beacon'].home_z_hop)|float %}
	{% set safe_home_x = (printer.configfile.settings.stepper_x.position_max) /2 %}
	{% set safe_home_y = (printer.configfile.settings.stepper_y.position_max) /2 %}
	
	{% if printer.toolhead.homed_axes != "xyz" %}
        G28
	{% endif %}

	{% if printer.configfile.settings.quad_gantry_level is defined %}
		QUAD_GANTRY_LEVEL RETRY_TOLERANCE=1
		QUAD_GANTRY_LEVEL horizontal_move_z=2
	{% elif printer.configfile.settings.z_tilt is defined %}
		Z_TILT_ADJUST RETRY_TOLERANCE=1
		Z_TILT_ADJUST horizontal_move_z=2
	{% endif %}

	G28 Z

	# settle the mechanics down  
	{% for i in range(10) %}
		beacon_poke speed=3 top=5 bottom=-0.6
	{% endfor %}

	# get and set start temperature offset 
	_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=150
	_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=150

	# get and set end temperature offset
	_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=250
	_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=250

	# get and set start temperature offset 
	_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=150
	_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=150

	# get and set end temperature offset
	_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=250
	_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=250

	# move back to home position
	G0 Z{z_hop} F{z_speed}
	G0 X{safe_home_x} Y{safe_home_y}

	# turn heater off
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0

			
	# echo results
	_BEACON_NOZZLE_TEMP_OFFSET

[gcode_macro _BEACON_PROBE_NOZZLE_TEMP_OFFSET]
gcode:
	# parameters
	{% set temp = params.TEMP|int %}

	# config
	{% set z_speed = (printer.configfile.settings['stepper_z'].homing_speed)|float * 60 %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}


	# wait for noozle to reach the probing temperature
	RESPOND  MSG="Waiting for nozzle to reach {temp}°C..."
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp} MAXIMUM={temp + 2}

	# wait for temperature to settle down
	RESPOND MSG="Waiting 60s for thermal expansion..."
	G4 P60000

	# probe
	RESPOND MSG="Probing with nozzle temperature {temp}°C..."
	PROBE PROBE_METHOD=contact SAMPLES=5 SAMPLES_TOLERANCE=0.005 SAMPLES_TOLERANCE_RETRIES=10 SAMPLES_RESULT=median
	G4 P2000 #wait 2 sec so beacon_query returns non inf value
	BEACON_QUERY

	# raise z
	G0 Z5 F{z_speed}

[gcode_macro _BEACON_SET_NOZZLE_TEMP_OFFSET]
gcode:
	{% set reset = true if params.RESET|default(false)|lower == 'true' else false %}

	# config 
	{% set z_speed = (printer.configfile.settings['stepper_z'].homing_speed)|float * 60 %}

	# beacon config
	{% set beacon_contact_calibration_temp = params.probing_temp|default(150)|int %}
	{% set beacon_contact_expansion_multiplier = printer["gcode_macro BEACON"].beacon_contact_expansion_multiplier|default(1.0)|float %}
	{% set beacon_contact_expansion_compensation = true if printer["gcode_macro BEACON"].beacon_contact_expansion_compensation|default(false)|lower == 'true' else false %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	{% if reset %}
		# reset applied offset
		SAVE_VARIABLE VARIABLE=nozzle_expansion_applied_offset VALUE=0

	{% else %}
		{% if beacon_contact_expansion_compensation %}

			# get coefficient value
			{% set nozzle_expansion_coefficient = svv.nozzle_expansion_coefficient|default(0)|float %}

			# get applied offset
			{% set applied_offset = svv.nozzle_expansion_applied_offset|default(0)|float %}

			# get extruder target temperature
			{% set temp = printer['extruder'].target|float %}

			# calculate new offset
			{% set temp_offset = temp - beacon_contact_calibration_temp %}
			{% set expansion_coefficient = nozzle_expansion_coefficient %}
			{% set expansion_offset = beacon_contact_expansion_multiplier * (temp_offset * (expansion_coefficient / 100)) %}

			# set new offset
			{% set new_offset = ((-applied_offset) + expansion_offset) %}
			SET_GCODE_OFFSET Z_ADJUST={new_offset} MOVE=1 SPEED={z_speed}
			SAVE_VARIABLE VARIABLE=nozzle_expansion_applied_offset VALUE={expansion_offset}

			# echo
			RESPOND MSG={'"Nozzle expansion offset of %.6fmm applied"' % expansion_offset}
		{% endif %}
	{% endif %}

[gcode_macro _BEACON_REMOVE_NOZZLE_TEMP_OFFSET]
gcode:
	# config 
	{% set z_speed = (printer.configfile.settings['stepper_z'].homing_speed)|float * 60 %}

	# beacon config
	{% set beacon_contact_expansion_compensation = true if printer["gcode_macro BEACON"].beacon_contact_expansion_compensation|default(false)|lower == 'true' else false %}

	{% if beacon_contact_expansion_compensation %}

		# ratos variables file
		{% set svv = printer.save_variables.variables %}

		# get applied offset
		{% set applied_offset = svv.nozzle_expansion_applied_offset|default(0)|float %}

		# remove applied offset
		SET_GCODE_OFFSET Z_ADJUST={(-applied_offset)} MOVE=0 SPEED={z_speed}

	{% endif %}

[gcode_macro _BEACON_STORE_NOZZLE_TEMP_OFFSET]
gcode:
	# parameters
	{% set temp = params.TEMP|int %}

	#variable file
	{% set svv = printer.save_variables.variables %}

	# get last probe result
	{% set last_z = printer.beacon.last_z_result|default(0)|float %}

	# set temperature offset
	{% if temp == 150 %}
		SET_GCODE_VARIABLE MACRO=BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET VARIABLE=reference_z VALUE={last_z}
	{% else %}
		{% set reference_z = printer["gcode_macro BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET"].reference_z|default(0)|float %}
		SAVE_VARIABLE VARIABLE=nozzle_expansion_coefficient VALUE={(last_z - reference_z)}
	{% endif %}

[gcode_macro _BEACON_NOZZLE_TEMP_OFFSET]
gcode:
	{% set svv = printer.save_variables.variables %}
	RESPOND  MSG={'"expansion coefficient %.6f"' % svv.nozzle_expansion_coefficient}